Клиент-серверная архитектура это тип устройства современного
взимодействия в такой штуке под названием - интернет.

Как это устроенно:
У нас имеется 4 участника данной истории.
1. Клиент
2. Балансировщик
3. Сервер
4. БД

Отойдя от темы, считаю важным внести некую помарку о том,что в ходе
все пояснения будет использован лишь один пример, операция, которую мы все 
выполняем каждый день, либо же, выполняли раз в жизни.
Этот пример - запрос погоды в бразуре. 


Теперь к деталям.

Что такое клиент. 
Клиент - это устройство будь то компьютер,либо же мобильный телефон,
либо устройство для считывания данных температуры в комнате.
Это устройство, способное передавать запросы различного типа к серверу.
Проще говоря - это рука, которая может у сервера что либо попросить,
сказать лишь одно слово - Дай.
Но и тут не все так просто, даты упросить жизнь обычным пользователям, 
т.е. людям. Клиент скрывает сложную для обывателя структуру запросов
под покрывалом красивых и понятных форм.
Требование к клиенту лишь одно - возможность отправить какой-либо запрос к серверу.
Так что будь то кнопочный мобильный телефон,или суперкомпьютер - в рамках 
данной темы они лишь клиенты.
Касаясь нашего примера - это компьютер или мобильный телефон, с которого
я захожу в интернет на сайт яндекса ya.ru. 
Открываю его и ввожу в поисковой строке то, что я хочу спросить у необъятного
интернета.

Балансировщик - или как сказать правильно, балансировщик серверного трафика.
Бывает выполнена на - 
сетевом уровне
транспортном уровне
прикладном уровне
Не вижу смысла углублять в детали, ибо незачем, для нас главное - суть.
Балансироващик обрабатывает все запросы от клиентов и решает, какому серверу 
их дать. Определяет какой более нагружен, эффективен и тд.
Балансироващик нужен для того, что сервер не упал, если можно так выразиться.
Падение - значит отказ системы обрабатывать запросы, либо же длительное их выполнение.
Примеры падения - наш любимый сайт госуслуги, который падает после очередного введения
новой денежной компенсации кому бы то не было и необходимостью оставить заявочку на госуслугах.
Касаясь нашего примера. 
После того, как мы отправили запрос от клиента, он попадает к балансировщику, который решает,
как сделать так, что бы мой запрос попал на самый оптимальный сервер.

Сервер - это мощный компьютер, стоящий в секретной комнате под чутким надзором сис.админа.
Сервер содержит в себе код нашей программы, кучи, сотни, тысячи строк кода
написанный на разных языках программирования для того, что бы обеспечить работу используемой программы.
Может возникнуть вопрос, но зачем нам сервер, ведь можно же было бы просто хранить весь код на компьютерах
наших клиентов и не париться, но нет. 
Это проще, а как гласят заповеди создателей Питона - простое лучше сложного. 
Если нам надо что-то обновить в нашем совершенном(нет) приложении - мы обновляем код на сервере, а не на каждом
компьютере пользователей, если что-то не даст бог сломается в коде - мы чиним сервер, а не пытаемся исправить 
ошибку на каждом компьютере пользователей и тд.
Серверов должно быть много. Если наш проект коммерческий, то мы должны обеспечить бесперебойную и эффективную работу
нашего приложения. Для этого, мы покуппаем и обсуживаем множество серверов, которые делят нагрузку, страхуют друг друга.
Конечно, в рамках ПЕТ проекта, можно запустить сервер и на локальном компьютере, но мы говорим о больших проектах.
Наш пример - после того, как мой запрос попал из балансировщика к наиболее эффективному серверу, мои чутки буквы проходят 
через кучу строк кода для того, что бы выдать мне погоду в интересующем меня регионе.

База данных. 
БД - это еще один мощный,очень мощный компьютер содержащий тонну информации обо всем.
Устанавливать можно базу данных уже какую угодно - рынок полон Apach, SQL, MangoBD - что ближе и теплее к вашей душе
и вашему корману.
Важно, сделать пояснение о том, что балансироващики могут быть и на пути между сервером и базой данных, т.к.
человечество уже скопило терабайты различной информации, но пока что не научилось ей пользоваться, нам нужно что бы
наш запрос попал в оптимальную базу данных.
Наш пример - мой запрос погоды от сервера попадает в базу данных, где содержится вся информация о всех сайтах, которые
способны мне показать погоду.

Затем, вся информация идет в обратном напрвлении. 
Данные о всех сайтах с погодой возвращаются из Базы данных на сервер, сервер их обрабатывает и возвращает клиенту
в виде красивой странички яндекса.

На этом все. Спасибо!
